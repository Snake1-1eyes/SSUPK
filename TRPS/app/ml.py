from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline


def predict_genetic_diseases(data):
    # Входные данные для обучения
    train_texts = [
        "У матери пациентки в пожилом возрасте был страх смерти, лечилась. Племянница наблюдается у психиатра.",  # 3
        "Бабушка и тётя повесились, племянница страдает шизофренией, регулярно лечиться в ПБ.",  # 4
        "Наследственность психопатологически не отягощена.",  # 0
        "Насл-ть не отягощ.",  # 0
        "Психические заболевания родственников отрицает.",  # 1
        "Отец злоупотреблял алкоголем, завершенный суицид. Сын - ДЦП.",  # 2
        "Дед по материнской линии злоупотрелял алкоголем, страдал колебаниями настроения.",  # 2
        "Мать после психотравмы однократно лечилась у психиатра.",  # 3
        "Мать стардала депрессивными состояниями, наблюдалась в ПНД.",  # 3
        "Мать страдала б-ью Альцгеймера.",  # 3
        "Мать лечилась в НПЦ по поводу панических атак.",  # 3
        "Бабушка по линии отца лечилась в ПБ.",  # 3
        "Мамь страдала с шизофренией, окончила жизнь самоубийством -выпрыгнула из окна. Отец страдал алкоголизмом.",
        # 4
        "Отец инвалид 2 группы (военная травма) наблюдался психиатрами.",  # 3
        "Родители страдали алкоголизмом, мать умерла в состоянии опьянения.",  # 2
        "Прабабка по материнской линии покончила с собой.",  # 4
        "Отец и бабушка по отцовской линии страдали алкоголизом."  # 2
    ]

    # Целевые метки для обучения
    train_labels = [2, 4, 0, 0, 1, 3, 3, 2, 2, 2, 2, 2, 4, 2, 3, 4, 3]

    # Значения целевых меток
    labels_meanings = [
        "Нет наследственной отягощенности",  # 0
        "Отрицает психические заболевания родственников",  # 1
        "Родственники имели психотравмы",  # 2
        "Родственники употребляли алкоголь/наркотики",  # 3
        "Родственники совершили суицид"  # 4
    ]

    pipeline = Pipeline([
        ('tfidf', TfidfVectorizer()),
        ('clf', SVC(kernel='linear'))
    ])

    # Обучение модели
    pipeline.fit(train_texts, train_labels)

    # Предсказания на новых данных
    predictions = pipeline.predict(data)
    result = {key: 0 for key in labels_meanings}

    # Вывод результатов предсказаний
    for prediction in predictions:
        result[labels_meanings[prediction]] += 1

    return result


def predict_family_relations(data):
    # Входные данные для обучения
    train_texts = [
        "Замужем. Отношения хорошие.  Сын.Др дети живут отдельно.",
        "Не замужем.  Детей нет. Проживает с сестрой в отдельной квартире. Отношения хорошие.",
        "Вдова. Двое детей.",
        "Разведена, в настоящее время проживает одна. Дочь с семьёй проживают отдельно. Взаимоотношения хорошие.",
        "Замуж вышла 22 года. Развелась в 2009 году. В настоящее время проживает одна.",
        "Женат, удовл. дети 3г и 9мес.",
        "Состояла в гражданском браке. Проживает с сыном.",
        "Не  замужем, в настоящее время проживает одна . Отношения сдержанные. Личная жизнь не устроена, детей нет.",
        "Замужем, детей нет. Отношения напряжённые.",
        "Женат, удовл.  детей нет.",
        "Замужем. Двое детей. Проживает с супругом. Отношения хорошие.",
        "В разводе, от брака детей нет. Проживает с матерью и братом.",
        "Разведена, детей нет. Проживает одна.",
        "Женат. Имеет дочь 1997г.р. Есть 3 внука. Живет с супругой в отдельной квартире.",
        "Разведена. Есть сын 9 лет. Проживает  с сыном.",
        "Состояла в гражданским браке 3года.От этих отношений дочь 6лет.",
        "Живет с гражданской женой 8 лет. Детей нет.",
        "В разводе, живет с дочерью.",
        "Проживает с гражданским мужем и двумя детьми"
    ]

    # Целевые метки для обучения
    train_labels = [0, 2, 2, 2, 3, 0, 3, 3, 1, 1, 0, 3, 3, 0, 0, 2, 1, 2, 0]

    # Значения целевых меток
    labels_meanings = [
        "Состоит в браке, есть дети",
        "Состоит в браке, детей нет",
        "Не состоит в браке, есть дети",
        "Не состоит в браке, детей нет",
    ]

    pipeline = Pipeline([
        ('tfidf', TfidfVectorizer()),
        ('clf', SVC(kernel='linear'))
    ])

    # Обучение модели
    pipeline.fit(train_texts, train_labels)

    # Предсказания на новых данных
    predictions = pipeline.predict(data)
    result = {key: 0 for key in labels_meanings}

    # Вывод результатов предсказаний
    for prediction in predictions:
        result[labels_meanings[prediction]] += 1

    return result


def predict_work_relations(data):
    # Входные данные для обучения
    train_texts = [
        "Вышла на пенсию, последнее время не работает.",
        "В настоящее время на пенсии по возрасту.",
        "Работала в магазине. 17л не работает из-за состояния.",
        "Работой довольна.",
        "Не работает.",
        "Не работает. На пенсии.",
        "на этом месте 10л,  отношения нормальные.",
        "на посл месте работает 5 лет. Отношения  нормальные. ,но   предстоит сокращение его должности.",
        "Работой менеджером в инвестиционной компании.",
        "Работал мастером производственного обучения.",
        "В настоящее время эксперт в полиции.",
        "Работает по специальности. На последнем месте полгода. Работа устраивает.",
        "Поступил в МИСиС, на 3 курсе. Работает в Вкусно и точка.",
        "Работала менеджером, руководителем. Не работает с 2017 г. , планирует сменить специальность.",
        "Работала по специальности , в настоящее время официально не работает.",
        "Работала поваром,  зав производством. На пенсии в 55 лет.",
        "Работает страховым агентом , удаленно.",
        "Работает  специалистом в банке."
    ]

    # Целевые метки для обучения
    train_labels = [2, 2, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 1, 1, 2, 0, 0]

    # Значения целевых меток
    labels_meanings = [
        "Работает",
        "Не работает",
        "На пенсии"
    ]

    pipeline = Pipeline([
        ('tfidf', TfidfVectorizer()),
        ('clf', SVC(kernel='linear'))
    ])

    # Обучение модели
    pipeline.fit(train_texts, train_labels)

    # Предсказания на новых данных
    predictions = pipeline.predict(data)
    result = {key: 0 for key in labels_meanings}

    # Вывод результатов предсказаний
    for prediction in predictions:
        result[labels_meanings[prediction]] += 1

    return result
